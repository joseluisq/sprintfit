import { sprintf } from '../src'

describe('sprintf', () => {
  it('undefined', () => expect(sprintf()).toBe(''))
  it('null', () => expect(sprintf(null)).toBe(''))
  it('empty', () => expect(sprintf('')).toBe(''))
  it('array', () => expect(sprintf([ 1, 2, 3 ])).toBe('1,2,3'))
  it('object', () => expect(sprintf({})).toBe('[object Object]'))
  it('true', () => expect(sprintf(true)).toBe('true'))
  it('false', () => expect(sprintf(false)).toBe(''))
  it('void 0', () => expect(sprintf(void 0)).toBe(''))
  it('string', () => expect(sprintf('Hello')).toBe('Hello'))
  it('format with no arguments', () => expect(() => sprintf('Hello %s'))
      .toThrowError('Too few arguments supplied.'))
  it('format with one argument', () => expect(sprintf('Hello %s', 'world!'))
      .toBe('Hello world!'))
  it('format with many arguments', () => expect(sprintf('foo %s', 'bar', 'baz'))
      .toBe('foo bar'))
  it('format arguments (middle)', () => expect(sprintf('a %s c %s e %s g', 'B', 'D', 'F'))
      .toBe('a B c D e F g'))
  it('format arguments (left)', () => expect(sprintf('%s b %s d %s f %s', 'A', 'C', 'E', 'G'))
      .toBe('A b C d E f G'))
  it('string with array of args', () => expect(sprintf('Hi:%s', [])).toBe('Hi:'))
})
