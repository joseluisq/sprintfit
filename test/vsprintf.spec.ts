import { vsprintf } from "../src"

describe("vsprintf", () => {
    it("undefined", () => expect(vsprintf()).toBe(""))
    it("null", () => expect(vsprintf(null)).toBe(""))
    it("empty", () => expect(vsprintf("")).toBe(""))
    it("array", () => expect(vsprintf([ 1, 2, 3 ])).toBe("1,2,3"))
    it("object", () => expect(vsprintf({})).toBe("[object Object]"))
    it("true", () => expect(vsprintf(true)).toBe("true"))
    it("false", () => expect(vsprintf(false)).toBe(""))
    it("void 0", () => expect(vsprintf(void 0)).toBe(""))
    it("string", () => expect(vsprintf("Hello")).toBe("Hello"))
    it("format with no arguments", () => expect(() => vsprintf("Hello %s"))
      .toThrowError("Too few arguments supplied."))
    it("format with no arguments explicit", () => expect(() => vsprintf("Hello %s", []))
      .toThrowError("Too few arguments supplied."))
    it("format with one argument", () => expect(vsprintf("Hello %s", [ "world!" ]))
      .toBe("Hello world!"))
    it("format with many arguments", () => expect(vsprintf("foo %s", [ "bar", "baz" ]))
      .toBe("foo bar"))
    it("format arguments (middle)", () => expect(vsprintf("a %s c %s e %s g", [ "B", "D", "F" ]))
      .toBe("a B c D e F g"))
    it("format arguments (left)", () => expect(vsprintf("%s b %s d %s f %s", [ "A", "C", "E", "G" ]))
      .toBe("A b C d E f G"))
})
